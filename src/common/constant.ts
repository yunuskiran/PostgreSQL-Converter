//EXPRESSION
export const tableExpression = /^CREATE TABLE \[(.*)\]\.\[(.*)\]\s*\(/;
export const columnExpression = /^\t\[(.*)\] (?:\[(.*)\]\.)?\[(.*)\]\s*(\(.+?\))?(?: COLLATE (\S+))?( IDENTITY\s*\(\d+,\s*\d+\))?(?: ROWGUIDCOL ?)? (?:NOT FOR REPLICATION )?(?:SPARSE +)?(NOT NULL|NULL)(?:\s+CONSTRAINT \[.*\])?(?:\s+DEFAULT \((.*)\))?(?:,|$)?/;
export const columnQualExpression = /\((\d+(?:,\s*\d+)?)\)/;
export const computedColumnExpression = /^\t\[(.*)\]\s+AS\s+\((.*)\)/;
export const constrainExpression = /^(?: CONSTRAINT \[(.*)\] )?PRIMARY KEY (?:NON)?CLUSTERED/;
export const constraintColumnExpression = /^\t\[(.*)\] (ASC|DESC)(,?)/;
export const uniqueConstraintExpression = /^\s*(?:CONSTRAINT \[(.*)\] )?UNIQUE/;
export const sequenceExpression = /^CREATE SEQUENCE \[(.*)\]\.\[(.*)\]/;
export const schemaExpression = /^CREATE SCHEMA \[(.*)\]/;
export const viewExpression = /^\s*(create\s*view)/i;
export const readAndCleanExpression = /(\/\*[^*]*\*\/)|(\/\/[^*]*)/g;
export const nothingSpecialExpression = /(\r)/gm;
export const numericExpression = /^(\d+),\s*(\d+)$/;
export const columnQualExpresion = /\d+,\s*0/;
export const geometryColumnExpression = /^geography$|^geometry$/i;
export const typeColumnExpression = /^(\S+)\.(\S+)$/;
export const identiyExpression = /IDENTITY\s*\((\d+),\s*(\d+)\)/;
export const storeDefaultExpression = /^\(?(\d+(\.\d+)?)\)?$/;
export const nullExpression = /^NULL$/;
export const nExpresison = /^N?'(.*)'$/;
export const onPrimaryExpression = /^\) ON \[PRIMARY\]/;
export const sequenceAsExpression = /^\s*AS \[.*\]\s*$/;
export const sequenceStartExpression=/^\s*START WITH (\d+)\s*$/;
export const sequenceIncrementExpresion=/^\s*INCREMENT BY (\d+)\s*$/;
export const sequenceMinExpression=/^\s*MINVALUE (-?\d+)\s*$/;
export const sequenceMaxExpression=/^\s*MAXVALUE (-?\d+)\s*$/;
export const sequenceCacheExpression=/^\s*(NO)?CACHE( \d+)?\s*$/;
export const goExpression=/^GO$/;
export const createViewExpression=/^\s*(create\s*view)\s*(?:\[(\S+)\]\.)?\[(.*?)\]\s*(.*)$/i;
export const viewDefinitionExpression=/^\s*(?:\[(\S+)\]\.)?\[(.*?)\]\s*(.*)$/;
//STRING
export const undefined = 'UNDEFINED';
export const xml = 'xml';
export const max = '(max)';
export const numeric = 'numeric';
export const smallInt = 'smallint';
export const integer = 'integer';
export const bigInt = 'bigint';
export const bit = 'bit';
export const boolean = 'boolean';
export const ntext = 'ntext';
export const text = 'text';
export const sysname = 'sysname';
export const varchar128 = 'varchar(128)';
export const sqlVariant = 'sql_variant';
export const emptyString = '';
export const notNull = 'NOT NULL';
export const zeroString = '0';
export const falseString = 'false';
export const oneString = '1';
export const trueString = 'true';
export const nullString = 'NULL';
export const pk = 'PK';
export const newLine = '\n';
export const unique = 'UNIQUE';
//NUMBER
export const precisionFour = 4;
export const precisionNine = 9;
export const precisionEighteen = 4;
